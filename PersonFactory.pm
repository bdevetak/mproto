package PersonFactory;

use strict;
use warnings;

use Data::Structure::Util qw(unbless);

use Person;
use Google::ProtocolBuffers::Dynamic;

use constant PRODUCES_TYPE => "Person";
use constant PROTO_PACKAGE => "Messages";
    
sub new {

    my $CLASS_NAME = PRODUCES_TYPE;

    my $proto_message_name = lc($CLASS_NAME) . "proto";

    my $proto_schema = _extract_proto_schema_from_moose_class({
        moose_class   => $CLASS_NAME,
        proto_package => PROTO_PACKAGE, 
    });

    my $dynamic = Google::ProtocolBuffers::Dynamic->new();

    $dynamic->load_string(
        $proto_message_name,
        $proto_schema
    );

    $dynamic->map({
        package => 'messages', prefix => ucfirst('messages')
    });

    return bless {
        description      => "Factory for Moose class Person",
        dynamic          => $dynamic,
        moose_class      => "Person",
        proto_package    => PROTO_PACKAGE,
        proto_schema     => $proto_schema, 
    };    
}

# serialize Person object to protobuf message
sub moose_to_proto {
    my $self = shift; 
}

# create Person from protobuf message
sub moose_from_proto {
    my $self = shift;
    my $protobuf_message = shift;

    my $class = 'Messages::' . $self->{moose_class};

    # All messages go to the package Messages::* by convention
    # The way serializer works, it generates perl classes automatically
    # from protobuf messages. What this factory does, is it creates
    # a wrapper around serializer and then creates Moose object from
    # blessed hash generated by the serializer. So, two objects are
    # generated based on the protobuf message. The first object generated
    # by the serializer is the message object which is a standard blessed
    # hashref. The second is Moose object created from the message. The
    # types in the proto schema correspond to the Moose attribute types.
    my $personMessage = $class->decode($protobuf_message);

    # extract params from protobuf message
    # TODO: loop all parameters required by Moose class and make sure they
    #       are there.
    my @params = (
        name  => $personMessage->{name},
        id    => $personMessage->{id},
    );

    # create Moose object
    my $personObject = Person->new(@params);

    return $personObject;    
}

sub moose_to_proto {
    my $self         = shift; # Factory object
    my $moose_object = shift; # Moose object

    my $hash = unbless $moose_object;

    my $bytes = $self->hash_to_proto($hash)
}

sub hash_to_proto {
    my $self = shift; # Factory object
    my $hash = shift;
    
    my $class = 'Messages::' . $self->{moose_class};

    my $proto_object = $class->new($hash); 
    my $bytes  = $class->encode($proto_object);
    return $bytes;
}

# proto_schema
sub _extract_proto_schema_from_moose_class {

    my $params = shift;

    my $moose_class   = $params->{moose_class};
    my $proto_package = $params->{proto_package};

    my $proto = q|
syntax = "proto2";

package | . lc($proto_package) . q|;

message |;

    $proto .= $moose_class . " {\n";

    # array of Moose class attributes, sorted in the way they are in 
    # in the proto message
    my $moose_obj_attributes = _get_attribute_description();
  
    # TODO: this should be in some base class
    my %moose_type_to_proto_type = (
        Str => 'string',
        Int => 'int32',
    );

    for my $att (@$moose_obj_attributes) {
        $proto .= "\t";
        $proto .= ($att->{required} ? "required" : "optional");
        $proto .= " ";
        $proto .= $moose_type_to_proto_type{$att->{type}};
        $proto .= " ";
        $proto .= $att->{name};
        $proto .= " = ";
        $proto .= $att->{proto_id};
        $proto .= ";\n";

    }

    $proto .= "}\n";
    return $proto;
}

# Factory class method: proto ids map is the same for all instances
sub _attribute_name_to_proto_id_map {
    return {
        name  => 1,
        id    => 2,
        email => 3, 
    } 
}

sub _get_attribute_description {
    my $CLASS_NAME = PRODUCES_TYPE;
    my $meta = $CLASS_NAME->meta;
    my @att;
    for my $att ($meta->get_all_attributes) {
        push @att, {
            name     => $att->{name}    ,
            type     => $att->{isa}     ,
            required => $att->{required},
            proto_id => _attribute_name_to_proto_id_map()->{$att->{name}},
        };
    }
 
    return \@att;
}

1;
